buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:5.0.0'
    }
}

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'java'
apply plugin: 'maven-publish'

group = 'zensharp'
archivesBaseName = 'ZenSharp'
version = "0.1.2"

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

shadowJar {
    baseName = archivesBaseName
    classifier = "all"
    version = version
}

//Shuts up javadoc failures
if (JavaVersion.current().isJava8Compatible()) {

    allprojects {

        tasks.withType(Javadoc) {

            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

repositories {
    mavenCentral()
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}

dependencies {
    compile group: 'org.ow2.asm', name: 'asm-commons', version: '5.2'

    testCompile(
            'org.junit.jupiter:junit-jupiter-api:5.0.1',
            'org.ow2.asm:asm-util:5.2'
    )

    testRuntime(
            'org.junit.jupiter:junit-jupiter-engine:5.0.1',
            'org.junit.vintage:junit-vintage-engine:4.12.1',
            'org.junit.platform:junit-platform-launcher:1.0.1',
            'org.junit.platform:junit-platform-runner:1.0.1'
    )
    //compile files("${System.properties['java.home']}/../lib/tools.jar")
    //compile files("libs/tools.jar")
}

task sourcesJar(type: Jar, dependsOn: classes) {

    description = 'Creates a JAR containing the source code.'
    from sourceSets.main.allSource
    classifier = 'sources'
}
task javadocJar(type: Jar, dependsOn: javadoc) {

    description = 'Creates a JAR containing the JavaDocs.'
    from javadoc.destinationDir
    classifier = 'javadoc'
}

jar {
    manifest {
        attributes([
                "Main-Class": "zensharp.ZenShell"
        ])
    }
}
artifacts {

    archives sourcesJar
    archives javadocJar
}

test {
    useJUnitPlatform()
    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
    }
}

publishing {

    publications {

        mavenJava(MavenPublication) {

            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            from components.java

            artifact sourcesJar {
                classifier 'sources'
            }

        }
    }

    repositories {
        maven {
            url = "https://maven2.jihuayu.site/releases"
            credentials {
                username = System.getenv('MAVEN_ADMIN_NAME')
                password = System.getenv('MAVEN_ADMIN_TOKEN')
            }
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}